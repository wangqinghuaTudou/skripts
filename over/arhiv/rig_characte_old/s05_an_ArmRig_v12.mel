 /*! ## Скрипт создает риг для рук персонажа.  Версия 12 (25.09.12)
> 1. Ориентация должна быть для всех косточек левой руки и плеча Z вниз.
> 2. Для удаления рига нажмите "Delete arm rig".
*/

/*! ## Что нового:
> 1.Заменил процедуру создания матч объектов
> 2.Система удаления рига
> 3.Поправил систему вспомогательного контроллера.
> 4.Добален доп спейс на фк плеча.



*/
/*! ##
>_________________________________________________________________________________
>©2012 Andrey Belyaev        www.3drigging.com
*/





global proc s05_an_ArmRig_v12()
{
    $win = "an_Arm_win";
    if (`window -exists $win`)
deleteUI $win;
window -t "Arm rigging tools v.12" -w 460 -h 320 -s true -rtf true -menuBar true $win;
	menu -label "File" -tearOff true;
    		menuItem -label "Load L_hand preset" -command "loadPreset(\"Left\")";
    		menuItem -label "Load R_hand preset" -command "loadPreset(\"Right\")" ;
columnLayout -adj true -co "both" 10;
separator   -h 6;
	 radioButtonGrp -l "Side:" -nrb 2 -la2 "Left" "Right" -sl 1 RBG_armSide;
separator   -st "none" -h 6;
	 textFieldButtonGrp -l "Arm joint:" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armJnt;" TFBG_armJnt;
	 textFieldButtonGrp -l "Revers joint:" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armReversJnt;" TFBG_armReversJnt;
separator -h 10;//////////////////
		textFieldButtonGrp -label "Head jnt:" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armHeadAuxobg;" TFBG_armHeadAuxobg;
		textFieldButtonGrp -label "Torso jnt:" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armTorsoAuxobg;" TFBG_armTorsoAuxobg;
		textFieldButtonGrp -label "Pelvis jnt:" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armPelvisAuxobg;" TFBG_armPelvisAuxobg;
separator   -h 6; ///////////////////
  	 textFieldButtonGrp -l "Switch_controller :" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armSwitchCtrl;" TFBG_armSwitchCtrl;
	 textFieldButtonGrp -l "Parent_controller :" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armParentCtrl;" TFBG_armParentCtrl;

	textFieldButtonGrp -l "Body_controller :" -bl "Assign"
			-bc	"string $sel[] = `ls -sl`;textFieldButtonGrp -e -tx $sel[0] TFBG_armBodyCtrl;" TFBG_armBodyCtrl;
separator -st "none" -h 6;
			rowColumnLayout -nc 3   -cw 1 140 -cw 2 140 -cw 3 140 ;
			 button   -l  "Help" -c "an_help( \"s05_an_ArmRig_v12.mel\");";
			 button   -l "Delete arm rig" -c "an_deleteArmRig()";
			 button   -l "Make arm rig" -c "an_doArmRig()";
			 setParent ..;
showWindow $win;
}


global proc string[] an_FldNames ( )
{
string $Sfx[] = `an_NamesList_v02 -Sfx` ;
return  { (`an_armSide`+"armRig"+$Sfx[5]), (`an_armSide`+"fkArmRig"+$Sfx[5]),
		(`an_armSide`+"ikArmRig"+$Sfx[5])};
}




global proc string[] an_CtNames ( )
{
string $Pfx[] = `an_NamesList_v02 -Pfx` ;
string $listNams[] = `an_NamesList_v02 -ctrl`;
string $Sfx[] = `an_NamesList_v02 -Sfx` ;
return {(`an_armSide`+$listNams[15]+$Sfx[9]),
  		(`an_armSide`+$listNams[10]+$Sfx[9]),
		(`an_armSide`+$listNams[11]+$Sfx[9]),
		(`an_armSide`+$listNams[12]+$Sfx[9]),
		(`an_armSide`+$listNams[13]+$Sfx[9]),
		(`an_armSide`+$listNams[14]+$Sfx[9])   };
}


global proc an_doArmRig()
 {
 an_recordArmVal;
 an_doArmFolders(`an_CtNames`, `an_FldNames`); //создаем папки
 string $elbowCtrl[]= an_ikArmElbowCtrl ( `an_CtNames`, `an_FldNames`); //размещаем локтевой контроллер.
 string $wristCtrl[]= an_reversArmIK (`an_CtNames`, `an_FldNames`); //размещаем контроллер кисти.
 string $fkJnt[]= an_fkArmRig (`an_CtNames`, `an_FldNames`); //фк риг.
 string $ikJnt[]= an_ikArmRig (`an_CtNames`, `an_FldNames`); // ик риг.
 an_armIkFkMix ( $fkJnt, $ikJnt); //миксуем цепочки.
 for ($each in `an_CtNames`) an_setJntRotOrder ($each);// выставляем ротейшн ордер...
 for ($each in `an_CtNames`) pvAddLimbAttr ($each, (`an_armSide`+"arm"));// добовляет аттрибут лимб...
 an_doMatchObjects (`an_CtNames`, $ikJnt, $fkJnt);
 an_AddLengthAttr ($ikJnt, $fkJnt);
 an_ikFkArmServiceProc ( $ikJnt, `an_CtNames` );
 }


global proc   _________RigProc___________() {}

global proc an_recordArmVal( ) //создаем папки
{
string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);
string $revJnt[] = an_childCapture (`textFieldButtonGrp -q -tx TFBG_armReversJnt`);
an_saveOriginalValues($Jnt);
an_saveOriginalValues($revJnt);
}

global proc string[] an_doArmFolders(string $CtNams[], string $FdNams[]) //создаем папки
{
string $ParentCtrl = `textFieldGrp -q -text TFBG_armParentCtrl`;
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;


string $IKgrp = ` group -em -n $FdNams[2] `;
string $FKgrp = ` group -em -n $FdNams[1] `;
string $General_grp = ` group  -n $FdNams[0] $IKgrp $FKgrp `;
parent $General_grp $ParentCtrl;

an_connector (($switch+"."+`an_armSide`+"armCtrls"), $General_grp+".v", 1 );

return {$General_grp, $FKgrp, $IKgrp};
}


global proc string[] an_ikArmElbowCtrl ( string $CtNams[], string $FdNams[])
{
string $ParentCtrl = `textFieldGrp -q -text TFBG_armParentCtrl`;
string $torsoCtrl = `textFieldGrp -q -text TFBG_armTorsoAuxobg`;
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;
string $Sfx[] = `an_NamesList_v02 -Sfx` ;


string $Jnts[] = an_childCapture (`textFieldGrp -q -text TFBG_armJnt`);

setAttr ($Jnts[2]+".preferredAngleZ") 60;//устанавливаем префангл.

vector $pVector = an_pVectorPoz ($Jnts[1], $Jnts[3] );

string $temp = an_Ctrl ("-poleVector", $CtNams[1]);
string $ElbowCtrl[] = an_ctGrp ($temp);
move -r ($pVector.x) ($pVector.y) ($pVector.z);

an_ctColor ($ElbowCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ;  ///коннектим цвет


string $attr = (`an_armSide`+"armIkFkSwitch");

if (!`attributeExists $attr $switch`)  addAttr   -ln $attr -dv 0 -min 0 -max 1  -keyable true  $switch ;



an_connector (($switch+"."+`an_armSide`+"armIkFkSwitch"), $ElbowCtrl[2]+".v", 1 );

string $objects[]={$ParentCtrl, $torsoCtrl};
an_spaceMaker_v2_0  (0,$objects, {"general", "torso"}, $ElbowCtrl[0], $ElbowCtrl[2] );

string $LineGrp = an_pVectorLine   ( $ElbowCtrl[2], $Jnts[2]);  // хелплиния.
string $rigGrp = `group  -n ( an_pfxMinus($CtNams[1])+$Sfx[5]) $ElbowCtrl[0]  $LineGrp `;
xform -os -piv 0 0 0;
parent $rigGrp $FdNams[2];
an_hideAttr  ($ElbowCtrl[2], {"sx", "sy", "sz", "v"});

for ($atr in {"rx", "ry", "rz"})  setAttr  -keyable false ($ElbowCtrl[2]+"."+$atr);

an_delSys ({$ElbowCtrl[0]} , $FdNams[0]);

return $ElbowCtrl ;
 }




global proc string[] an_reversArmIK ( string $CtNams[], string $FdNams[])
{
string $Sfx[] = `an_NamesList_v02 -Sfx` ;
string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);
string $lsNams[] = `an_NamesList_v02 -ctrl`;
string $revJnt[] = an_childCapture (`textFieldButtonGrp -q -tx TFBG_armReversJnt`);
string $ParentCtrl = `textFieldGrp -q -text TFBG_armParentCtrl`;
string $torsoCtrl = `textFieldGrp -q -text TFBG_armTorsoAuxobg`;
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;
string $headCtrl = `textFieldGrp -q -text TFBG_armHeadAuxobg`;
string $pelvisCtrl = `textFieldGrp -q -text TFBG_armPelvisAuxobg`;

string $tmp = an_Ctrl ("-ikArm", $CtNams[2]);    //создаем группу с клонтроллером
string $wristCtrl[] = an_ctGrp ($tmp);

//group -n ( an_pfxMinus($wristCtrl[2])+$Sfx[8]) $wristCtrl[2];  //создание вспомогательного контроллера (группы)
//xform -os -piv 0 0 0;
an_ctColor ($wristCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ;  ///коннектим цвет
string $temp[] = `parentConstraint $Jnt[3] $wristCtrl[0]`; delete $temp[0];
$temp = `orientConstraint $Jnt[3] $revJnt[3]`; delete $temp[0];

string $JntGrp = `group -n ( an_pfxMinus($CtNams[2])+"_reversJnt"+$Sfx[5]) $revJnt[0]` ;

addAttr   -ln "Revers" -dv 0   -keyable true  $wristCtrl[2] ;
setAttr -lock true ($wristCtrl[2]+".Revers");
addAttr   -ln "Bend" -dv 0   -keyable true  $wristCtrl[2] ;
addAttr   -ln "Side" -dv 0   -keyable true  $wristCtrl[2] ;
connectAttr ($wristCtrl[2]+".Bend") ($revJnt[2]+".rz" );
setDrivenKeyframe -cd ($wristCtrl[2]+".Side") -dv 0  -v 0 ($revJnt[0]+".rz");
setDrivenKeyframe -cd ($wristCtrl[2]+".Side") -dv 180  -v 180 ($revJnt[0]+".rz");
setDrivenKeyframe -cd ($wristCtrl[2]+".Side") -dv 0  -v 0 ($revJnt[1]+".rz");
setDrivenKeyframe -cd ($wristCtrl[2]+".Side") -dv -180  -v 180 ($revJnt[1]+".rz");

string $objects[]={$ParentCtrl, $pelvisCtrl, $torsoCtrl, $headCtrl  };
string $attr[]= {$lsNams[1], $lsNams[4], $lsNams[7], $lsNams[9]};
an_spaceMaker_v2_0  (0,$objects, $attr, $wristCtrl[0], $wristCtrl[2] );

string $RigGrp = `group -n ( an_pfxMinus($CtNams[2])+"HandRig"+$Sfx[5]) $wristCtrl[0] $JntGrp `;
xform -os -piv 0 0 0;

parent $RigGrp $FdNams[2];

an_connector (($switch+"."+`an_armSide`+"armIkFkSwitch"), $wristCtrl[2]+".v", 1 );

an_hideAttr  ($wristCtrl[2], {"sx", "sy", "sz", "v"});

an_connectRigVis ($FdNams[0],  {$revJnt[0]});

an_delSys ({$wristCtrl[0]} , $FdNams[0]);

/*string $handRevJnt[] = `duplicate -renameChildren  $Jnt[3]`;// копируем кисть и цепляем к реверс костям
parent $handRevJnt[0]  $revJnt[3];

select -hierarchy $handRevJnt[0] ;
string $sel [] =`ls -sl`;
for ($each in $sel)
		{
		 rename $each (`substitute ($Sfx[4]+"1") $each ("Revers"+$Sfx[3])`)  ;
		}
		*/
return $wristCtrl;
}



global proc string[] an_fkArmRig ( string $CtNams[], string $FdNams[]) /////////////////////////////////
{
string $CtNams[] = `an_CtNames`;
string $FdNams[] = `an_FldNames`;

string $Sfx[] = `an_NamesList_v02 -Sfx` ;
string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);
string $ParentCtrl = `textFieldGrp -q -text TFBG_armParentCtrl`;
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;
string $torso = `textFieldGrp -q -text TFBG_armTorsoAuxobg`;
string $body = `textFieldGrp -q -text TFBG_armBodyCtrl`;

string $fkJnt[] = an_duplicatAndRename($Jnt[0],("Fk"+$Sfx[3]));
	string $childNames[] = `listRelatives -c $fkJnt[3]`;
	string $Child;  for ($Child in $childNames)  {   delete $Child; }
																		//создаем контроллеры
string $temp = an_Ctrl ("-fk", $CtNams[5]);						//кисть
string $handCtrl[] = an_ctGrp ($temp);
string $tmp[] = `parentConstraint $fkJnt[3]  $handCtrl[0]`; delete $tmp[0];
parentConstraint $handCtrl[2] $fkJnt[3];

string $temp = an_Ctrl ("-fk", $CtNams[4]); 						//локоть
string $forearmCtrl[] = an_ctGrp ($temp);
string $tmp[] = `parentConstraint $fkJnt[2]  $forearmCtrl[0]`; delete $tmp[0];
parentConstraint  $forearmCtrl[2] $fkJnt[2] ;
parent $handCtrl[0] $forearmCtrl[2];

		addAttr   -ln "length" -dv 1  -min 0 -max 5  -keyable true  $forearmCtrl[2] ;
		string $lengthMult = `createNode   "multiplyDivide"`;
		setAttr ($lengthMult+".input2X") (`getAttr ($fkJnt[3]+".tx")`);
		connectAttr -f ($forearmCtrl[2]+".length") ($lengthMult+".input1X");
	    connectAttr -f ($lengthMult+".outputX")   ($handCtrl[0]+".tx");

string $temp = an_Ctrl ("-fk", $CtNams[3]);									//плечо
string $armCtrl[] = an_ctGrp ($temp);

pointConstraint $Jnt[1] $armCtrl[1]; ///////////////////////////правка

string $tmp[] = `parentConstraint $fkJnt[1]  $armCtrl[0]`; delete $tmp[0];
parentConstraint  $armCtrl[2] $fkJnt[1]  ;
parent $forearmCtrl[0] $armCtrl[2];

		addAttr   -ln "length" -dv 1  -min 0 -max 5  -keyable true  $armCtrl[2] ;
		string $lengthMult = `createNode   "multiplyDivide"`;
		setAttr ($lengthMult+".input2X") (`getAttr ($fkJnt[2]+".tx")`);
		connectAttr -f ($armCtrl[2]+".length") ($lengthMult+".input1X");
	    connectAttr -f ($lengthMult+".outputX")   ($forearmCtrl[0]+".tx");

an_ctColor ($armCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ;///коннектим цвет
an_ctColor ($forearmCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ;///коннектим цвет
an_ctColor ($handCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ;///коннектим цвет

an_connector (($switch+"."+`an_armSide`+"armIkFkSwitch"), $armCtrl[2]+".v", -1 );

an_hideAttr  ($handCtrl[2], {"tx","ty","tz",   "sx", "sy", "sz", "v"});
an_hideAttr  ($forearmCtrl[2], {"tx","ty","tz",   "rx","ry",  "sx", "sy", "sz", "v"});
an_hideAttr  ($armCtrl[2], {"tx","ty","tz", "sx", "sy", "sz", "v"});


string $JntGrp = `group -n ( an_pfxMinus($CtNams[0])+"_fkJnt"+$Sfx[5]) $fkJnt[0] $armCtrl[0]`; //группа с костями
parent $JntGrp $FdNams[1];

parentConstraint -mo $fkJnt[0] $armCtrl[0];



string $objects[]={$ParentCtrl, $fkJnt[0], $body, $torso };
an_spaceMaker_v2_0  (1,$objects, {"general", "shoulder", "body", "torso"}, $armCtrl[1], $armCtrl[2]);

renameAttr ($armCtrl[2]+".rot_space") "space";

an_connectRigVis ($FdNams[0], {$fkJnt[0]});

an_delSys ({$armCtrl[1], $fkJnt[0] } , $FdNams[0]);

return {$fkJnt[0], $fkJnt[1], $fkJnt[2], $fkJnt[3] } ;
}




global proc string[]  an_ikArmRig ( string $CtNams[], string $FdNams[])  //////////////////////////////////////////////
{
string $Sfx[] = `an_NamesList_v02 -Sfx` ;
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;

string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);
string $revJnt[] = an_childCapture (`textFieldButtonGrp -q -tx TFBG_armReversJnt`);
string $torsoJnt = `textFieldGrp -q -text TFBG_armTorsoAuxobg`;
string $ParentCtrl = `textFieldGrp -q -text TFBG_armParentCtrl`;

														/////////////////////дублируем косточки....
string $ikJnt[] = an_duplicatAndRename($Jnt[0],  "_IkJnt");  // создаем ик цепочку и удаляем пальцы
	string $childNames[] = `listRelatives -c $ikJnt[3]`; parent -w $ikJnt[0];
	string $Child;  for ($Child in $childNames)  {   delete $Child; }

string $aimJnt[] = an_duplicatAndRename($Jnt[0], "_aimJnt");  // создаем aim цепочку
	delete $aimJnt[2]; parent -w $aimJnt[0];

string $targetJnt[] =  an_duplicatAndRename($Jnt[0], "_targetJnt");    // создаем target цепочку
	string $childNames[] = `listRelatives -c $targetJnt[3]`; parent -w $targetJnt[0];
	for ($Child in $childNames)  {   delete $Child; }
	                                                                     /////////////////////создаем группы....
string $ikJntGrp = `group -n (an_sfxMinus($CtNams[0])+"Joint"+$Sfx[7]) $ikJnt[0] $aimJnt[0] $targetJnt[0]`; xform -os -piv 0 0 0;
	parentConstraint -mo $torsoJnt $ikJntGrp;


	string $autoSHLDGrp = `group -n (an_sfxMinus($CtNams[0])+"Rig"+$Sfx[5]) $ikJntGrp `; xform -os -piv 0 0 0;
parent $autoSHLDGrp $FdNams[2];
     				                                         /////////////////////создаем ик хандлы....
	addAttr   -ln "lock_elbow" -dv 0   -keyable true  $CtNams[1] ;
	setAttr -lock true ($CtNams[1]+".lock_elbow");
	addAttr   -ln "lock" -dv 0 -min 0 -max 1  -keyable true  $CtNams[1] ;

    ///////////////////////////////////
string $targetIk[] =	an_soft2JntIK ( $targetJnt[1] ,  $CtNams[1] ); //стретч ик таргет
	connectAttr  ($CtNams[1]+".lock") ($targetIk[0]+".lock");
	pointConstraint $CtNams[2] $targetIk[0];     parent $targetIk[1] $autoSHLDGrp ; parent $targetIk[0] $autoSHLDGrp ;
 	orientConstraint  $CtNams[2] $targetJnt[3];

	addAttr   -ln "additional" -dv 0   -keyable true  $CtNams[2] ;
		setAttr -lock true ($CtNams[2]+".additional");
	addAttr   -ln "stretching" -dv 1 -min 0 -max 1  -keyable true  $CtNams[2] ;
		connectAttr  ($CtNams[2]+".stretching") ($targetIk[0]+".stretching");
	addAttr   -ln "upLength" -dv 1 -min .01 -max 10  -keyable true  $CtNams[2] ;
		connectAttr  ($CtNams[2]+".upLength") ($targetIk[0]+".upLength");
	addAttr   -ln "dwLength" -dv 1 -min .01 -max 10  -keyable true  $CtNams[2] ;
		connectAttr  ($CtNams[2]+".dwLength") ($targetIk[0]+".dwLength");
	addAttr   -ln "softness" -dv 1 -min 0 -max 1  -keyable true  $CtNams[2] ;
		connectAttr  ($CtNams[2]+".softness") ($targetIk[0]+".softnes");
	addAttr -ln "softIK"  -at "enum" -en "on:off"   -keyable true $CtNams[2];
		connectAttr  ($CtNams[2]+".softIK") ($targetIk[0]+".softIK");


string $mineIk[] =	an_soft2JntIK( $ikJnt[1] ,  $CtNams[1] );         //стретч ик

	connectAttr  ($CtNams[1]+".lock") ($mineIk[0]+".lock");
	connectAttr  ($CtNams[2]+".stretching") ($mineIk[0]+".stretching");
	connectAttr  ($CtNams[2]+".upLength") ($mineIk[0]+".upLength");
	connectAttr  ($CtNams[2]+".dwLength") ($mineIk[0]+".dwLength");
	connectAttr  ($CtNams[2]+".softness") ($mineIk[0]+".softnes");
	connectAttr  ($CtNams[2]+".softIK") ($mineIk[0]+".softIK");

	string $revJntParent[] = `listRelatives -parent $revJnt[0]`; // парентим группу с реверс костями под таргет кости.
	parentConstraint -mo $targetJnt[3] $revJntParent[0];
	pointConstraint $revJnt[3] $mineIk[0];	    parent $mineIk[1] $autoSHLDGrp ; parent $mineIk[0] $autoSHLDGrp ;

																			                        //создаем автоплечо	////////////////////
	 																	    //ик хандл плеча аим плеча
string $ikShldHandle[]=`ikHandle   -n ($aimJnt[0]+"_Shoulder_ik") -sol ikSCsolver -shf 0 -sj $aimJnt[0] -ee $aimJnt[1] `;
parent $ikShldHandle[0] $autoSHLDGrp;          orientConstraint -mo $torsoJnt $ikShldHandle[0] ;

	string $autoShldrCnstr[] = `pointConstraint   $targetJnt[2] $ikShldHandle[0]`;
 														//группа нолевого автоплеча
	string $autoMixPoint = `group -em -n ($aimJnt[0] +"mixPoint")`;
	string $tmp[]	= `parentConstraint $aimJnt[1] $autoMixPoint`; delete $tmp[0];	//позиционируем
	pointConstraint   $autoMixPoint $ikShldHandle[0]; 	parent $autoMixPoint  $ikJntGrp ; //добовляем группу на аутошолдерконстрейн

string $manualShldHandle[]=`ikHandle   -n ($aimJnt[0]+"_manual_ik") -sol ikSCsolver /// хандл плеча управляемого в ручную
-shf 0 -sj $ikJnt[0] -ee $ikJnt[1] `;   parent $manualShldHandle[0] $autoSHLDGrp;
  															/////////////////////контроллер плеча
string $temp = an_Ctrl ("-shoulder", $CtNams[0]);
string $shoulderCtrl[] = an_ctGrp ($temp);

an_ctColor ($shoulderCtrl[2], $switch, `radioButtonGrp -q -sl RBG_armSide`) ; ///коннектим цвет

addAttr   -ln "AutoShoulder" -dv 0 -min 0 -max 1  -keyable true  $shoulderCtrl[2] ;
string $tmp[]	= `pointConstraint $ikJnt[1] $shoulderCtrl[0]`; delete $tmp[0];


	string $blend = `createNode -name ( an_pfxMinus($CtNams[6])+"_blend") "blendTwoAttr"`;  // создание бленд ноды отключающей автомат
	connectAttr  ($switch+"."+`an_armSide`+"armIkFkSwitch") ($blend+".attributesBlender");
	setAttr ($blend+".input[0]") 0;
	connectAttr  ($shoulderCtrl[2] +".AutoShoulder") ($blend+".input[1]");

	an_connector (($blend+".output"), ($autoShldrCnstr[0]+"."+$autoMixPoint +"W1"), -1 ); //управление констрейном автомата
	connectAttr ($blend+".output") ($autoShldrCnstr[0]+"."+$targetJnt[2] +"W0");

	parentConstraint -mo $aimJnt[1] $shoulderCtrl[1] ;
	parentConstraint -mo  $shoulderCtrl[2] $manualShldHandle[0] ;
																					//система растяжения плеча

addAttr   -ln "stretching" -dv 0 -min 0 -max 1  -keyable true  $shoulderCtrl[2] ;
		string $strSholderBlend = `createNode -name ( an_pfxMinus($CtNams[6])+"_strSholder") "blendTwoAttr"`;  // создание бленд ноды отключающей расстяжение плеча
		connectAttr  ($shoulderCtrl[2]+".stretching") ($strSholderBlend+".attributesBlender");
		setAttr ($strSholderBlend+".input[0]") (`getAttr ($ikJnt[1]+".tx")`) ;

		string $shoulderDistans[] = an_distans ($shoulderCtrl[2], $ikJnt[0], "shoulder" );

		if ((`getAttr ($ikJnt[1]+".tx")`)>0)                                          /// если значение икса положительно то дистанс конектится напрямую
				{ connectAttr  $shoulderDistans[0] ($strSholderBlend+".input[1]") ;    }
		else
				{
				string $revers = `createNode -name ($ikJnt[0]+"_revers#") "multiplyDivide"`;   // если нет то через реверс ноду
				connectAttr  $shoulderDistans[0]  ($revers+".input1X");
				setAttr ($revers+".input2X") -1;
				connectAttr  ($revers+".outputX") ($strSholderBlend+".input[1]") ;
				 }
		//connectAttr  ($switch+".sx")  $shoulderDistans[1]  ;
		connectAttr  ($strSholderBlend+".output") ($ikJnt[1]+".tx") ;
		parent $shoulderCtrl[0] $shoulderDistans[1] $autoSHLDGrp;  //  scaleConstraint -mo $genCt $shoulderCtrlGrp ;

an_hideAttr  ($shoulderCtrl[2], {"rx","ry","rz", "sx", "sy", "sz", "v"});

an_connectRigVis ($FdNams[0],  {$ikJntGrp, $targetIk[0], $mineIk[0], $ikShldHandle[0], $manualShldHandle[0] });


an_delSys ({ $mineIk[1], $targetIk[1], $strSholderBlend} , $FdNams[0]);


orientConstraint $revJnt[3] $ikJnt[3];

return $ikJnt;
}



global proc  an_armIkFkMix( string $fkCtrlPoints[], string $ikJnt[])
{
string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);
string $switch = `textFieldGrp -q -text TFBG_armSwitchCtrl`;

string $fkJnt[]	= an_childCapture ($fkCtrlPoints[0]);

connectAttr ($ikJnt[0]+".r") ($Jnt[0]+".r");   // ключица
parentConstraint  $ikJnt[0] $fkJnt[0];

													//Плечо
connectAttr ($ikJnt[1]+".t") ($Jnt[1]+".t");
connectAttr ($ikJnt[1]+".t") ($fkJnt[1]+".t");

string $constr[]	=  `orientConstraint $ikJnt[1] $fkJnt[1] $Jnt[1]`;

an_connector (($switch+"."+`an_armSide`+"armIkFkSwitch"),  ($constr[0]+"."+$ikJnt[1]+"W0"), 1 );
string $reversNode = an_connector (($switch+"."+`an_armSide`+"armIkFkSwitch"),  ($constr[0]+"."+$fkJnt[1]+"W1"), 0 );

an_mix3attr({($fkCtrlPoints[2]+".r"), ($ikJnt[2]+".r")}, ($Jnt[2]+".r"), ($switch+"."+`an_armSide`+"armIkFkSwitch"), ($ikJnt[2]+"nn") );
an_mix3attr({($fkCtrlPoints[2]+".t"), ($ikJnt[2]+".t")}, ($Jnt[2]+".t"), ($switch+"."+`an_armSide`+"armIkFkSwitch"), ($ikJnt[2]+"nt") );
an_mix3attr({($fkCtrlPoints[3]+".r"), ($ikJnt[3]+".r")}, ($Jnt[3]+".r"), ($switch+"."+`an_armSide`+"armIkFkSwitch"), ($ikJnt[3]+"nn") );
an_mix3attr({($fkCtrlPoints[3]+".t"), ($ikJnt[3]+".t")}, ($Jnt[3]+".t"), ($switch+"."+`an_armSide`+"armIkFkSwitch"), ($ikJnt[3]+"nt") );


an_delSys ({($ikJnt[2]+"nn"), ($ikJnt[2]+"nt"), ($ikJnt[3]+"nn"), ($ikJnt[3]+"nt"), $reversNode} , $fkJnt[0]);


}


global proc an_doMatchObjects(string $CtNams[], string $ikJnt[], string $fkJnt[])
{
string $machObj[];

$machObj[0] = an_matchObject($CtNams[1], $fkJnt[1]);  //elbowIk
$machObj[1] = an_matchObject($CtNams[2], $fkJnt[3]);  //l_handIk

$machObj[2] = an_matchObject($CtNams[3], $ikJnt[1]);  //Arm
$machObj[3] = an_matchObject($CtNams[4], $ikJnt[2]);  //foreArm
$machObj[4] = an_matchObject($CtNams[5], $ikJnt[3]);  //hand
//print $fkJnt[2] ;
print $machObj ;
}


 /*
global proc an_doMatchObjects(string $CtNams[], string $ikJnt[], string $fkJnt[])
{
string $Sfx[] = `an_NamesList_v02 -Sfx` ;

string $machObj[];

$machObj[0] = `group -em  -n ( an_pfxMinus($CtNams[0])+$Sfx[10])`;
string $temp[] = `parentConstraint $CtNams[0] $machObj[0]`; delete $temp[0];

$machObj[1] = `group -em  -n ( an_pfxMinus($CtNams[1])+$Sfx[10])`;
string $temp[] = `parentConstraint $CtNams[1] $machObj[1]`; delete $temp[0];



string $dupl [] =  an_duplicatAndRename( $fkJnt[0], $Sfx[10]) ;

for ($each in {$dupl[0], $dupl[1], $dupl[2]})
	   {
		for ($attr in {".tx", ".ty", ".tz", ".rx", ".ry", ".rz", ".sx", ".sy", ".sz" }) setAttr -k  true  -lock false ($each+$attr) ;
		}

parent $machObj[0] $fkJnt[1]; //  kneeIk
parent $machObj[1] $fkJnt[2]; //  footIk

parent $dupl[2] $ikJnt[2]; //   foot
parent $dupl[1] $ikJnt[1]; //   knee
parent $dupl[0] $ikJnt[0]; //   upLeg


};


global proc an_doMatchObjects(string $CtNams[], string $ikJnt[], string $fkJnt[])
//         l_upArm_CT   l_foreArm_CT   l_hand_CT //
{
string $Sfx[] = `an_NamesList_v02 -Sfx` ;

string $machObj[];
int $i;
for ($i=1; $i<(size($CtNams));$i++)
		{
		$machObj[$i] = `group -em  -n ( an_pfxMinus($CtNams[$i])+$Sfx[10])`;
		string $temp[] = `parentConstraint $CtNams[$i] $machObj[$i]`; delete $temp[0];

		int $order = `getAttr ($CtNams[$i]+".rotateOrder")` ;
		setAttr ($machObj[$i]+".rotateOrder") $order ;
		}

parent $machObj[1] $fkJnt[2]; //  elbowIk
parent $machObj[2] $fkJnt[3]; //  handIk

parent $machObj[3] $ikJnt[1]; //   upArm
parent $machObj[4] $ikJnt[2]; //   foreArm
parent $machObj[5] $ikJnt[3]; //   hand
}
 */

global proc an_AddLengthAttr ( string $ikJnt[], string $fkJnt[])
{
int $i;
for ($i= 0; $i<3; $i++ )  pvAddLengthAttr ($ikJnt[$i]);

for ($i= 0; $i<3; $i++ )  pvAddLengthAttr ($fkJnt[$i]);
}


global proc  an_ikFkArmServiceProc ( string $ikJnt[], string $CtNams[] ) //процедура создает механизм для корректроно переключения ик фк.
{
string $Jnt[]	= an_childCapture (`textFieldButtonGrp -q -tx TFBG_armJnt`);

addAttr   -ln "K_soft"   -keyable true  $ikJnt[2] ;

string $Blend = `createNode -name ( an_pfxMinus($CtNams[5])+"kSoft") "blendTwoAttr"`;
	connectAttr -f ($Blend+".output ") ($ikJnt[2]+".K_soft");
	connectAttr -f    ($CtNams[2]+".softness") ($Blend+".attributesBlender ") ;

	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 0 -v 0      ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 15 -v 0.034 ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 30 -v 0.038 ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 45 -v 0.028 ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 60 -v 0.012 ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 65 -v 0     ($Blend+".input[0]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 0 -v 0      ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 15 -v 0.097 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 30 -v 0.135 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 45 -v 0.147 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 60 -v 0.137 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 75 -v 0.108 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 90 -v 0.07  ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 105 -v 0.025 ($Blend+".input[1]");
	setDrivenKeyframe -cd ($Jnt[2]+".rz") -dv 110 -v 0    ($Blend+".input[1]");

string $curves[] = ` listConnections $Blend`;

 keyTangent -e -a -f 0 -inAngle 0.00758467  -outAngle 0.00758467   -inWeight 1 $curves[2];
 keyTangent -e -a -f 15 -inAngle 0.0022837  -outAngle 0.0022837   -inWeight 1 $curves[2];
 keyTangent -e -a -f 30 -inAngle -0.000922274  -outAngle -0.000922274   -inWeight 1 $curves[2];
 keyTangent -e -a -f 45 -inAngle -0.00198057  -outAngle -0.00198057   -inWeight 1 $curves[2];
 keyTangent -e -a -f 60 -inAngle -0.00328864  -outAngle -0.00328864   -inWeight 1 $curves[2];
 keyTangent -e -a -f 65 -inAngle -0.00676812  -outAngle -0.00676812   -inWeight 1 $curves[2];

 keyTangent -e -a -f 0 -inAngle 0.0226763  -outAngle 0.0226763   -inWeight 1 $curves[3];
 keyTangent -e -a -f 15 -inAngle 0.00834517  -outAngle 0.00834517   -inWeight 1 $curves[3];
 keyTangent -e -a -f 30 -inAngle 0.00397887  -outAngle 0.00397887   -inWeight 1 $curves[3];
 keyTangent -e -a -f 45 -inAngle 0  -outAngle 0  -inWeight 1 $curves[3];
 keyTangent -e -a -f 60 -inAngle -0.00310352  -outAngle -0.00310352   -inWeight 1 $curves[3];
 keyTangent -e -a -f 75 -inAngle -0.00533169  -outAngle -0.00533169   -inWeight 1 $curves[3];
 keyTangent -e -a -f 90 -inAngle -0.00660493  -outAngle -0.00660493   -inWeight 1 $curves[3];
 keyTangent -e -a -f 105 -inAngle -0.00891482  -outAngle -0.00891482   -inWeight 1 $curves[3];
 keyTangent -e -a -f 110 -inAngle -0.0119366  -outAngle -0.0119366   -inWeight 1 $curves[3];
}

global proc   _________WorkProc___________() {}//


 global proc loadPreset (string $side)
{
string $jntNams[] = `an_NamesList_v02 -bones`;
string $Pfx[] = `an_NamesList_v02 -Pfx` ;
string $ctNams[] = `an_NamesList_v02 -ctrl`;
string $Sfx[] = `an_NamesList_v02 -Sfx` ;

if (`gmatch $side "Left"`)
		{
		radioButtonGrp -e -sl 1 RBG_armSide;
		$side=$Pfx[0];
		}

else
		{
		radioButtonGrp -e -sl 2 RBG_armSide;
		$side=$Pfx[1];
		}

textFieldButtonGrp -e -tx ($side+$jntNams[4]+$Sfx[4]) TFBG_armJnt;
textFieldButtonGrp -e -tx ($side+$jntNams[18]+"1"+$Sfx[3]) TFBG_armReversJnt;
textFieldButtonGrp -e -tx ($jntNams[3]+$Sfx[4]) TFBG_armHeadAuxobg;
textFieldButtonGrp -e -tx ($jntNams[1]+"03"+$Sfx[4]) TFBG_armTorsoAuxobg;
textFieldButtonGrp -e -tx ($jntNams[0]+"02"+$Sfx[4]) TFBG_armPelvisAuxobg;
textFieldButtonGrp -e -tx ($ctNams[0]+$Sfx[9]) TFBG_armSwitchCtrl;
textFieldButtonGrp -e -tx ($ctNams[2]+$Sfx[9]) TFBG_armParentCtrl;
textFieldButtonGrp -e -tx ($ctNams[3]+$Sfx[9]) TFBG_armBodyCtrl ;
};


global proc pvAddLimbAttr (string $objName, string $limbName)
{
    if (!`attributeExists "limb" $objName`)
    {
        addAttr -dt "string" -ln "limb" $objName ;
        setAttr -type "string" ($objName + ".limb") $limbName ;
        setAttr -l 1 ($objName + ".limb") ;
    }
    else
    {
        setAttr -l 0 ($objName + ".limb") ;
        setAttr -type "string" ($objName + ".limb") $limbName ;
        setAttr -l 1 ($objName + ".limb") ;
    }
}

global proc   an_deleteArmRig()
{
string $Obg[] = an_FldNames();
string $Jnt[] = an_childCapture (`textFieldGrp -q -text TFBG_armJnt`);
string $reversJnt =  `textFieldButtonGrp -q -tx TFBG_armReversJnt` ;
parent -w $reversJnt;
an_delRig ($Obg[0]);
an_setOriginalValues($Jnt);
setAttr ($reversJnt+".visibility") 1;
select -cl  ;
}

global proc string an_armSide ()
{
string $Pfx[] = `an_NamesList_v02 -Pfx` ;
 if ((`radioButtonGrp -q -sl RBG_armSide`)==1) {return $Pfx[0];} else {return $Pfx[1];}
}